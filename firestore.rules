rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.uid != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'adm@gmail.com';
    }

    function isDriver() {
      return isAuthenticated() && request.auth.uid != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver';
    }

    function isPassenger() {
      return isAuthenticated() && request.auth.uid != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'passenger';
    }

    function isApprovedDriver() {
      return isDriver() && 
        exists(/databases/$(database)/documents/drivers/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/drivers/$(request.auth.uid)).data.status == 'approved';
    }

    // Regras para usuários e suas subcoleções
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        userId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAdmin();

      // Subcoleção de notificações do usuário
      match /notifications/{notificationId} {
        allow read: if isAuthenticated() && (userId == request.auth.uid || isAdmin());
        allow create: if isAuthenticated() && userId == request.auth.uid;
        allow update: if isAuthenticated() && userId == request.auth.uid;
        allow delete: if isAuthenticated() && userId == request.auth.uid;
      }

      // Subcoleção de histórico de corridas do usuário
      match /rideHistory/{rideId} {
        allow read: if isAuthenticated() && (userId == request.auth.uid || isAdmin());
        allow write: if isAuthenticated() && (userId == request.auth.uid || isAdmin());
      }

      // Subcoleção de métodos de pagamento do usuário
      match /paymentMethods/{methodId} {
        allow read: if isAuthenticated() && (userId == request.auth.uid || isAdmin());
        allow write: if isAuthenticated() && userId == request.auth.uid;
      }
    }

    // Regras para motoristas
    match /drivers/{driverId} {
      allow read: if true;
      allow create: if isAuthenticated() && driverId == request.auth.uid;
      allow update: if isAuthenticated() && (
        driverId == request.auth.uid || 
        (isPassenger() && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['rating', 'totalRatings'])) ||
        isAdmin()
      );
      allow delete: if isAdmin();

      // Subcoleção de documentos do motorista
      match /documents/{documentId} {
        allow read: if isAuthenticated() && (driverId == request.auth.uid || isAdmin());
        allow write: if isAuthenticated() && (driverId == request.auth.uid || isAdmin());
      }

      // Subcoleção de ganhos do motorista
      match /earnings/{earningId} {
        allow read: if isAuthenticated() && (driverId == request.auth.uid || isAdmin());
        allow write: if isAuthenticated() && (driverId == request.auth.uid || isAdmin());
      }
    }

    // Regras para corridas ativas
    match /activeRides/{rideId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        exists(/databases/$(database)/documents/drivers/$(request.auth.uid)) ||
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated();

      // Subcoleção de atualizações de localização
      match /locationUpdates/{updateId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && (
          resource.data.userId == request.auth.uid ||
          resource.data.driverId == request.auth.uid
        );
        allow delete: if false;
      }
    }

    // Regras para corridas completadas
    match /completedRides/{rideId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isApprovedDriver() || isPassenger() || isAdmin()
      );
      allow update: if isAuthenticated() && (
        (resource.data.userId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['rating', 'ratingComment', 'ratedAt'])) ||
        (resource.data.driverId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['driverRating', 'driverComment', 'driverRatedAt'])) ||
        isAdmin()
      );
      allow delete: if false;
    }

    // Regras para corridas canceladas
    match /cancelledRides/{rideId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.driverId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        isApprovedDriver() || isPassenger() || isAdmin()
      );
      allow update: if isAdmin();
      allow delete: if false;
    }

    // Regras para veículos
    match /vehicles/{vehicleId} {
      allow read: if true;
      allow create: if isAuthenticated() && isDriver();
      allow update: if isAuthenticated() && (
        resource.data.driverId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Regras para categorias de veículos
    match /vehicleCategories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Regras para configurações do sistema
    match /systemSettings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Regras para preços dinâmicos
    match /dynamicPricing/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Regras para promoções
    match /promotions/{promoId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Regras para destinos rápidos
    match /quickDestinations/{destinationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['name', 'origin', 'destination', 'userId', 'createdAt', 'icon']) &&
        request.resource.data.origin.keys().hasAll(['place', 'address', 'coordinates']) &&
        request.resource.data.destination.keys().hasAll(['place', 'address', 'coordinates']);
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Regras para avaliações
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Regras para logs do sistema
    match /systemLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Regras para notificações (coleção principal)
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para mensagens do chat
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.driverId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.driverId == request.auth.uid
      );
      allow delete: if false;

      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.driverId == request.auth.uid
        );
        allow create: if isAuthenticated();
        allow update: if false;
        allow delete: if false;
      }
    }

    // Regra padrão - negar acesso a todas as outras coleções
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 